/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View;

import Model.Domain.Disciplina;
import Model.Domain.Professor;
import Utils.DateFormat;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Karlos
 */
public class GerenciaProfessor extends javax.swing.JInternalFrame {

    private Professor objprof;

    public GerenciaProfessor() {
        initComponents();
        this.objprof = new Professor();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        this.carregaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela_prof = new javax.swing.JTable();
        titulo_gerenAluno = new javax.swing.JLabel();
        text_nomeProf = new javax.swing.JLabel();
        c_nomeProf = new javax.swing.JTextField();
        text_idadeProf = new javax.swing.JLabel();
        c_dataNascProf = new javax.swing.JTextField();
        text_rgProf = new javax.swing.JLabel();
        c_rgProf = new javax.swing.JTextField();
        text_cpfProf = new javax.swing.JLabel();
        c_cpfProf = new javax.swing.JTextField();
        text_formacaoProf = new javax.swing.JLabel();
        c_formacaoProf = new javax.swing.JTextField();
        text_titulacaoProf = new javax.swing.JLabel();
        c_titulacaoProf = new javax.swing.JTextField();
        text_dataAdmissaoProf = new javax.swing.JLabel();
        c_dataAdmissaoProf = new javax.swing.JTextField();
        botao_cancelarGerenAluno = new javax.swing.JButton();
        botao_alterarAluno = new javax.swing.JButton();
        botao_apagarAluno = new javax.swing.JButton();

        setBackground(new java.awt.Color(135, 192, 221));
        setMinimumSize(new java.awt.Dimension(549, 412));
        setPreferredSize(new java.awt.Dimension(549, 412));

        tabela_prof.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Matricula", "Nome", "Nascimento", "RG", "CPF", "Formação", "Titulação", "Data de Admissão"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_prof.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabela_profMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela_prof);

        titulo_gerenAluno.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titulo_gerenAluno.setForeground(new java.awt.Color(0, 102, 102));
        titulo_gerenAluno.setText("Gerenciamento de Professores");

        text_nomeProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_nomeProf.setText("Nome:");

        c_nomeProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_nomeProfActionPerformed(evt);
            }
        });

        text_idadeProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_idadeProf.setText("Nascimento:");

        c_dataNascProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_dataNascProfActionPerformed(evt);
            }
        });

        text_rgProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_rgProf.setText("RG:");

        c_rgProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_rgProfActionPerformed(evt);
            }
        });

        text_cpfProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_cpfProf.setText("CPF:");

        c_cpfProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_cpfProfActionPerformed(evt);
            }
        });

        text_formacaoProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_formacaoProf.setText("Formação:");

        c_formacaoProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_formacaoProfActionPerformed(evt);
            }
        });

        text_titulacaoProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_titulacaoProf.setText("Nível de Titulação:");

        c_titulacaoProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_titulacaoProfActionPerformed(evt);
            }
        });

        text_dataAdmissaoProf.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_dataAdmissaoProf.setText("Data de Admissão:");

        c_dataAdmissaoProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_dataAdmissaoProfActionPerformed(evt);
            }
        });

        botao_cancelarGerenAluno.setBackground(new java.awt.Color(255, 102, 102));
        botao_cancelarGerenAluno.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        botao_cancelarGerenAluno.setForeground(new java.awt.Color(0, 0, 0));
        botao_cancelarGerenAluno.setText("CANCELAR");
        botao_cancelarGerenAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_cancelarGerenAlunoActionPerformed(evt);
            }
        });

        botao_alterarAluno.setBackground(new java.awt.Color(102, 102, 255));
        botao_alterarAluno.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        botao_alterarAluno.setForeground(new java.awt.Color(0, 0, 0));
        botao_alterarAluno.setText("ALTERAR");
        botao_alterarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_alterarAlunoActionPerformed(evt);
            }
        });

        botao_apagarAluno.setBackground(new java.awt.Color(255, 51, 51));
        botao_apagarAluno.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        botao_apagarAluno.setForeground(new java.awt.Color(0, 0, 0));
        botao_apagarAluno.setText("APAGAR");
        botao_apagarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_apagarAlunoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo_gerenAluno)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_cpfProf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_cpfProf, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_formacaoProf)
                        .addGap(18, 18, 18)
                        .addComponent(c_formacaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(botao_cancelarGerenAluno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botao_alterarAluno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botao_apagarAluno))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_rgProf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(c_rgProf, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(text_dataAdmissaoProf)
                            .addComponent(text_titulacaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c_dataAdmissaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c_titulacaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_idadeProf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_dataNascProf, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_nomeProf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(c_nomeProf, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo_gerenAluno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_nomeProf)
                    .addComponent(c_nomeProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_idadeProf)
                    .addComponent(c_dataNascProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(c_rgProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text_rgProf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_cpfProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text_cpfProf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_formacaoProf)
                    .addComponent(c_formacaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_titulacaoProf)
                    .addComponent(c_titulacaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(text_dataAdmissaoProf)
                            .addComponent(c_dataAdmissaoProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(46, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botao_apagarAluno)
                            .addComponent(botao_cancelarGerenAluno)
                            .addComponent(botao_alterarAluno)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void c_nomeProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_nomeProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_nomeProfActionPerformed

    private void c_dataNascProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_dataNascProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_dataNascProfActionPerformed

    private void c_rgProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_rgProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_rgProfActionPerformed

    private void c_cpfProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_cpfProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_cpfProfActionPerformed

    private void c_formacaoProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_formacaoProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_formacaoProfActionPerformed

    private void c_titulacaoProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_titulacaoProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_titulacaoProfActionPerformed

    private void c_dataAdmissaoProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_dataAdmissaoProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_dataAdmissaoProfActionPerformed

    private void botao_cancelarGerenAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_cancelarGerenAlunoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botao_cancelarGerenAlunoActionPerformed

    private void tabela_profMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabela_profMouseClicked
        if (this.tabela_prof.getSelectedRow() != -1) {

            String nome = this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 1).toString();
            String dataNascimento = DateFormat.converterDataString(this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 2).toString());
            String rg = this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 3).toString();
            String cpf = this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 4).toString();
            String formacao = this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 5).toString();
            String nivelTitulacao = this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 6).toString();
            String dataAdmissao = DateFormat.converterDataString(this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 7).toString());

            this.c_nomeProf.setText(nome);
            this.c_dataNascProf.setText(dataNascimento);
            this.c_rgProf.setText(rg);
            this.c_cpfProf.setText(cpf);
            this.c_formacaoProf.setText(formacao);
            this.c_titulacaoProf.setText(nivelTitulacao);
            this.c_dataAdmissaoProf.setText(dataAdmissao);
        }
    }//GEN-LAST:event_tabela_profMouseClicked

    private void botao_alterarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_alterarAlunoActionPerformed
        try {

            int matricula = 0;
            String nome = "";
            LocalDate dataNascimento = null;
            String rg = "";
            String cpf = "";
            String formacao = "";
            String nivelTitulacao = "";
            LocalDate dataAdmissao = null;

            if (this.c_nomeProf.getText().length() < 2) {
                throw new Mensagens("Nome deve conter ao menos 2 caracteres.");

            } else {
                nome = this.c_nomeProf.getText();
            }
            if (this.c_dataNascProf.getText().length() != 10) {
                throw new Mensagens("Data deve conter 10 caracteres.");

            } else {
                dataNascimento = DateFormat.converterDataSQL(this.c_dataNascProf.getText());

            }

            if (this.c_rgProf.getText().length() != 7) {
                throw new Mensagens("RG deve conter 7 caracteres.");

            } else {
                rg = this.c_rgProf.getText();

            }
            if (this.c_cpfProf.getText().length() != 11) {
                throw new Mensagens("CPF deve conter 11 caracteres.");

            } else {
                cpf = this.c_cpfProf.getText();

            }

            if (this.c_formacaoProf.getText().length() < 5) {
                throw new Mensagens("Formação deve conter ao menos 5 caracteres");

            } else {
                formacao = this.c_formacaoProf.getText();
            }

            if (this.c_titulacaoProf.getText().length() < 5) {
                throw new Mensagens("Titulação deve conter ao menos 5 caracteres");

            } else {
                nivelTitulacao = this.c_titulacaoProf.getText();

            }

            if (this.c_dataAdmissaoProf.getText().length() != 10) {
                throw new Mensagens("Data deve conter 10 caracteres.");

            } else {
                dataAdmissao = DateFormat.converterDataSQL(this.c_dataAdmissaoProf.getText());

            }
            
            if (this.tabela_prof.getSelectedRow() == -1) {
                throw new Mensagens("Primeiro selecione um aluno para alterar");
            } else {
                matricula = Integer.parseInt(this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 0).toString());
            }
            

            if (this.objprof.UpdateProfessorBD(dataAdmissao, formacao, nivelTitulacao, matricula, nome, dataNascimento, rg, cpf)) {
                JOptionPane.showMessageDialog(rootPane, "Professor Cadastrado com Sucesso!");
                
                this.c_dataAdmissaoProf.setText("");
                this.c_formacaoProf.setText("");
                this.c_titulacaoProf.setText("");
                this.c_nomeProf.setText("");
                this.c_dataNascProf.setText("");
                this.c_rgProf.setText("");
                this.c_cpfProf.setText("");
                
            }

        } catch (Mensagens erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage());
        } catch (NumberFormatException erro2) {
            JOptionPane.showMessageDialog(null, "Informe um número.");
        }

    }//GEN-LAST:event_botao_alterarAlunoActionPerformed

    private void botao_apagarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_apagarAlunoActionPerformed
        try {
            //validando dados da interface gráfica
            int matricula = 0;
            if (this.tabela_prof.getSelectedRow() == -1) {
                throw new Mensagens("Primeiro Selecione um Professor para APAGAR");
            } else {
                matricula = Integer.parseInt(this.tabela_prof.getValueAt(this.tabela_prof.getSelectedRow(), 0).toString());
            }

            int resposta_usuario = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja APAGAR este Professor?");

            if (resposta_usuario == 0) {
                if (this.objprof.DeleteProfessorBD(matricula)) {
                    this.c_nomeProf.setText("");
                    this.c_dataNascProf.setText("");
                    this.c_rgProf.setText("");
                    this.c_cpfProf.setText("");
                    this.c_titulacaoProf.setText("");
                    this.c_dataAdmissaoProf.setText("");
                    this.c_formacaoProf.setText("");
                    
                    JOptionPane.showMessageDialog(rootPane, "Professor apagado com sucesso");
                }
            }
            System.out.println(this.objprof.getProfessores().toString());
        } catch (Mensagens erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage());
        } finally {
            this.carregaTabela();
        }
    }//GEN-LAST:event_botao_apagarAlunoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botao_alterarAluno;
    private javax.swing.JButton botao_apagarAluno;
    private javax.swing.JButton botao_cancelarGerenAluno;
    private javax.swing.JTextField c_cpfProf;
    private javax.swing.JTextField c_dataAdmissaoProf;
    private javax.swing.JTextField c_dataNascProf;
    private javax.swing.JTextField c_formacaoProf;
    private javax.swing.JTextField c_nomeProf;
    private javax.swing.JTextField c_rgProf;
    private javax.swing.JTextField c_titulacaoProf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela_prof;
    private javax.swing.JLabel text_cpfProf;
    private javax.swing.JLabel text_dataAdmissaoProf;
    private javax.swing.JLabel text_formacaoProf;
    private javax.swing.JLabel text_idadeProf;
    private javax.swing.JLabel text_nomeProf;
    private javax.swing.JLabel text_rgProf;
    private javax.swing.JLabel text_titulacaoProf;
    private javax.swing.JLabel titulo_gerenAluno;
    // End of variables declaration//GEN-END:variables

    public void carregaTabela() {

        DefaultTableModel modelo = (DefaultTableModel) this.tabela_prof.getModel();
        modelo.setNumRows(0);

        List<Professor> minhalista = new ArrayList<>();
        minhalista = objprof.getProfessores();

        for (Professor p : minhalista) {
            modelo.addRow(new Object[]{
                p.getMatricula(),
                p.getNome(),
                p.getDataNascimento(),
                p.getRg(),
                p.getCpf(),
                p.getFormacao(),
                p.getNivelTitulacao(),
                p.getDataAdmissao(),});

        }

    }

}
